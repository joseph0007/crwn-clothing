{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\React\\\\crwn-clothing\\\\src\\\\pages\\\\shoppage\\\\shoppage.page.jsx\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\"; // import { firestore, fetchShopData } from \"../../utils/firebase/firebase.utils\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\"; // import CollectionPreview from \"../../components/collection-preview/collection-preview.component\";\n// import Category from \"../../components/category/category.component\";\n// import { withSpinner } from \"../../components/with-spinner/with-spinner.component\";\n\nimport { selectIsFetching, isShopDataLoaded } from \"../../redux/shop/shop.selectors\";\nimport { fetchShopCollectionsAsync } from \"../../redux/shop/shop.actions\";\nimport \"./shoppage.styles.scss\";\nimport CollectionPreviewContainer from \"../../components/collection-preview/collection-preview.container\";\nimport CategoryCollection from \"../../components/category/category.collection\"; // const WithSpinnerCollectionPreview = withSpinner(CollectionPreview);\n// const WithSpinnerCategory = withSpinner(Category);\n\nclass Shop extends React.Component {\n  componentDidMount() {\n    const {\n      fetchShopCollectionsAsync\n    } = this.props;\n    fetchShopCollectionsAsync();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}/` // render={(props) => (\n        //   <WithSpinnerCollectionPreview isLoading={isFetching} {...props} />\n        // )}\n        ,\n        component: CollectionPreviewContainer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:categoryId` // render={(props) => (\n        //   <WithSpinnerCategory isLoading={!isShopDataLoaded} {...props} />\n        // )}\n        ,\n        component: CategoryCollection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n} // const mapStateToProps = createStructuredSelector({\n//   isFetching: selectIsFetching,\n//   isShopDataLoaded: isShopDataLoaded,\n// });\n\n/**\r\n * all thunk does is if we dispatch a function instead of an object(action object) then thunk will pass the dipatch to that\r\n * function and we can then use the dispatch method to pass multiple dispatch methods in the same function at once!!!\r\n */\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchShopCollectionsAsync: () => dispatch(fetchShopCollectionsAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(Shop);","map":{"version":3,"sources":["C:/React/crwn-clothing/src/pages/shoppage/shoppage.page.jsx"],"names":["React","Route","connect","createStructuredSelector","selectIsFetching","isShopDataLoaded","fetchShopCollectionsAsync","CollectionPreviewContainer","CategoryCollection","Shop","Component","componentDidMount","props","render","match","path","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CAEA;AACA;AACA;;AACA,SACEC,gBADF,EAEEC,gBAFF,QAGO,iCAHP;AAKA,SAASC,yBAAT,QAA0C,+BAA1C;AAEA,OAAO,wBAAP;AACA,OAAOC,0BAAP,MAAuC,kEAAvC;AACA,OAAOC,kBAAP,MAA+B,+CAA/B,C,CAEA;AACA;;AAEA,MAAMC,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAmC;AACjCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEL,MAAAA;AAAF,QAAgC,KAAKM,KAA3C;AACAN,IAAAA,yBAAyB;AAC1B;;AAEDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKF,KAAvB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,GAFtB,CAGE;AACA;AACA;AALF;AAME,QAAA,SAAS,EAAER;AANb;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEO,KAAK,CAACC,IAAK,cADtB,CAEE;AACA;AACA;AAJF;AAKE,QAAA,SAAS,EAAEP;AALb;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA3BgC,C,CA8BnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMQ,kBAAkB,GAAIC,QAAD,KAAe;AACxCX,EAAAA,yBAAyB,EAAE,MAAMW,QAAQ,CAACX,yBAAyB,EAA1B;AADD,CAAf,CAA3B;;AAIA,eAAeJ,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAP,CAAkCP,IAAlC,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n// import { firestore, fetchShopData } from \"../../utils/firebase/firebase.utils\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\n// import CollectionPreview from \"../../components/collection-preview/collection-preview.component\";\r\n// import Category from \"../../components/category/category.component\";\r\n// import { withSpinner } from \"../../components/with-spinner/with-spinner.component\";\r\nimport {\r\n  selectIsFetching,\r\n  isShopDataLoaded,\r\n} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport { fetchShopCollectionsAsync } from \"../../redux/shop/shop.actions\";\r\n\r\nimport \"./shoppage.styles.scss\";\r\nimport CollectionPreviewContainer from \"../../components/collection-preview/collection-preview.container\";\r\nimport CategoryCollection from \"../../components/category/category.collection\";\r\n\r\n// const WithSpinnerCollectionPreview = withSpinner(CollectionPreview);\r\n// const WithSpinnerCategory = withSpinner(Category);\r\n\r\nclass Shop extends React.Component {\r\n  componentDidMount() {\r\n    const { fetchShopCollectionsAsync } = this.props;\r\n    fetchShopCollectionsAsync();\r\n  }\r\n\r\n  render() {\r\n    const { match } = this.props;\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={`${match.path}/`}\r\n          // render={(props) => (\r\n          //   <WithSpinnerCollectionPreview isLoading={isFetching} {...props} />\r\n          // )}\r\n          component={CollectionPreviewContainer}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:categoryId`}\r\n          // render={(props) => (\r\n          //   <WithSpinnerCategory isLoading={!isShopDataLoaded} {...props} />\r\n          // )}\r\n          component={CategoryCollection}\r\n        ></Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//   isFetching: selectIsFetching,\r\n//   isShopDataLoaded: isShopDataLoaded,\r\n// });\r\n\r\n/**\r\n * all thunk does is if we dispatch a function instead of an object(action object) then thunk will pass the dipatch to that\r\n * function and we can then use the dispatch method to pass multiple dispatch methods in the same function at once!!!\r\n */\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchShopCollectionsAsync: () => dispatch(fetchShopCollectionsAsync()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Shop);\r\n"]},"metadata":{},"sourceType":"module"}