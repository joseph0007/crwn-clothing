{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { firestore, fetchShopData } from \"../../utils/firebase/firebase.utils\";\nimport { shopTypes } from \"./shop.types\";\nimport { fetchShopDataSuccess, fetchShopDataFailure } from \"./shop.actions\";\nexport const fetchShopCollectionsAsync = function* () {\n  try {\n    const shopDataRef = firestore.collection(\"shopData\");\n    const shopData = yield shopDataRef.get();\n    const convertedShopData = yield call(fetchShopData, shopData);\n    yield put(fetchShopDataSuccess(convertedShopData)); // yield console.log(\"working\");\n  } catch (error) {\n    yield put(fetchShopDataFailure(error.message));\n  }\n};\nexport const fetchShopCollectionsStart = function* () {\n  // takeEvery() listens for actions that gets dispatched due to some actions and then catches it!!\n  yield takeEvery(shopTypes.FETCH_SHOPDATA_PROCESSING, fetchShopCollectionsAsync);\n};\n/**\r\n * export const fetchShopCollectionsAsync = () => (dispatch) => {\r\n  // step1: set the isFetching to true\r\n  dispatch(fetchShopDataProcessing());\r\n\r\n  const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n  shopDataRef\r\n    .get()\r\n    .then((snapshot) => {\r\n      const shopData = fetchShopData(snapshot);\r\n\r\n      // shopDataUpdater(shopData);\r\n      // step2: if shopdata successfully retrieved then dispatch the success action\r\n      dispatch(fetchShopDataSuccess(shopData));\r\n\r\n      //remove the isLoading\r\n      // this.setState({ isLoading: false });\r\n    })\r\n    .catch((err) => {\r\n      dispatch(fetchShopDataFailure(err.message));\r\n    });\r\n};\r\n */","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["call","put","takeEvery","firestore","fetchShopData","shopTypes","fetchShopDataSuccess","fetchShopDataFailure","fetchShopCollectionsAsync","shopDataRef","collection","shopData","get","convertedShopData","error","message","fetchShopCollectionsStart","FETCH_SHOPDATA_PROCESSING"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qCAAzC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,gBAA3D;AAEA,OAAO,MAAMC,yBAAyB,GAAG,aAAa;AACpD,MAAI;AACF,UAAMC,WAAW,GAAGN,SAAS,CAACO,UAAV,CAAqB,UAArB,CAApB;AAEA,UAAMC,QAAQ,GAAG,MAAMF,WAAW,CAACG,GAAZ,EAAvB;AAEA,UAAMC,iBAAiB,GAAG,MAAMb,IAAI,CAACI,aAAD,EAAgBO,QAAhB,CAApC;AAEA,UAAMV,GAAG,CAACK,oBAAoB,CAACO,iBAAD,CAArB,CAAT,CAPE,CASF;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACM,oBAAoB,CAACO,KAAK,CAACC,OAAP,CAArB,CAAT;AACD;AACF,CAdM;AAgBP,OAAO,MAAMC,yBAAyB,GAAG,aAAa;AACpD;AACA,QAAMd,SAAS,CACbG,SAAS,CAACY,yBADG,EAEbT,yBAFa,CAAf;AAID,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { firestore, fetchShopData } from \"../../utils/firebase/firebase.utils\";\r\nimport { shopTypes } from \"./shop.types\";\r\nimport { fetchShopDataSuccess, fetchShopDataFailure } from \"./shop.actions\";\r\n\r\nexport const fetchShopCollectionsAsync = function* () {\r\n  try {\r\n    const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n    const shopData = yield shopDataRef.get();\r\n\r\n    const convertedShopData = yield call(fetchShopData, shopData);\r\n\r\n    yield put(fetchShopDataSuccess(convertedShopData));\r\n\r\n    // yield console.log(\"working\");\r\n  } catch (error) {\r\n    yield put(fetchShopDataFailure(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchShopCollectionsStart = function* () {\r\n  // takeEvery() listens for actions that gets dispatched due to some actions and then catches it!!\r\n  yield takeEvery(\r\n    shopTypes.FETCH_SHOPDATA_PROCESSING,\r\n    fetchShopCollectionsAsync\r\n  );\r\n};\r\n\r\n/**\r\n * export const fetchShopCollectionsAsync = () => (dispatch) => {\r\n  // step1: set the isFetching to true\r\n  dispatch(fetchShopDataProcessing());\r\n\r\n  const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n  shopDataRef\r\n    .get()\r\n    .then((snapshot) => {\r\n      const shopData = fetchShopData(snapshot);\r\n\r\n      // shopDataUpdater(shopData);\r\n      // step2: if shopdata successfully retrieved then dispatch the success action\r\n      dispatch(fetchShopDataSuccess(shopData));\r\n\r\n      //remove the isLoading\r\n      // this.setState({ isLoading: false });\r\n    })\r\n    .catch((err) => {\r\n      dispatch(fetchShopDataFailure(err.message));\r\n    });\r\n};\r\n */\r\n"]},"metadata":{},"sourceType":"module"}