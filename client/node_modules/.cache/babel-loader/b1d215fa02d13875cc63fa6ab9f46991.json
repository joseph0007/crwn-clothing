{"ast":null,"code":"import _regeneratorRuntime from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/React/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React from\"react\";import{connect}from\"react-redux\";import{createStructuredSelector}from\"reselect\";import{withRouter}from\"react-router-dom\";import\"./App.css\";import{HomePage}from\"./pages/homepage/homepage.page.jsx\";import Shop from\"./pages/shoppage/shoppage.page\";import{Route,Switch,Redirect}from\"react-router-dom\";import Header from\"./components/header/header.component\";import SignInPage from\"./pages/signpage/signpage.component\";import CheckOut from\"./pages/checkout/checkout.pages\";import{auth,createUserDocDB}from\"./utils/firebase/firebase.utils\";import _setCurrentUser from\"./redux/users/users.actions\";import{selectCurrentUser}from\"./redux/users/users.selectors\";/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */ // const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.unsubscribeFromAuth=null;return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.unsubscribeFromAuth=auth.onAuthStateChanged(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user){var setCurrentUser,userDocRef;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setCurrentUser=_this2.props.setCurrentUser;if(!user){_context.next=8;break;}_context.next=4;return createUserDocDB(user);case 4:userDocRef=_context.sent;// using the snapShot method which gives us both the data and the id\n// we can call the data() method on the docRef to get the data in the JSON format and the id can be\n// found on the snapShot object!!\nuserDocRef.onSnapshot(function(snapShot){// this.setState(\n//   {\n//     currentUser: {\n//       id: snapShot.id,\n//       ...snapShot.data(),\n//     },\n//   },\n//   () => {\n//     console.log(this.state);\n//   }\n// );\nsetCurrentUser(_objectSpread({id:snapShot.id},snapShot.data()));});_context.next=9;break;case 8:setCurrentUser(user);case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.unsubscribeFromAuth();}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",component:HomePage}),/*#__PURE__*/_jsx(Route,{path:\"/shop\",component:Shop}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/checkout\",component:CheckOut}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/signin\",render:function render(){return _this3.props.currentUser?/*#__PURE__*/_jsx(Redirect,{to:\"/\"}):/*#__PURE__*/_jsx(SignInPage,{});}})]})]});}}]);return App;}(React.Component);// subscriber function: constantly listens for any change!!(like an event Listener)\nvar mapStateToProps=createStructuredSelector({currentUser:selectCurrentUser});var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setCurrentUser:function setCurrentUser(user){return dispatch(_setCurrentUser(user));}};};export default withRouter(connect(mapStateToProps,mapDispatchToProps)(App));","map":{"version":3,"sources":["C:/React/crwn-clothing/src/App.js"],"names":["React","connect","createStructuredSelector","withRouter","HomePage","Shop","Route","Switch","Redirect","Header","SignInPage","CheckOut","auth","createUserDocDB","setCurrentUser","selectCurrentUser","App","unsubscribeFromAuth","onAuthStateChanged","user","props","userDocRef","onSnapshot","snapShot","id","data","currentUser","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"+hCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,wBAAT,KAAyC,UAAzC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,MAAO,WAAP,CACA,OAASC,QAAT,KAAyB,oCAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gCAAjB,CACA,OAASC,KAAT,CAAgBC,MAAhB,CAAwBC,QAAxB,KAAwC,kBAAxC,CACA,MAAOC,CAAAA,MAAP,KAAmB,sCAAnB,CACA,MAAOC,CAAAA,UAAP,KAAuB,qCAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iCAArB,CACA,OAASC,IAAT,CAAeC,eAAf,KAAsC,iCAAtC,CACA,MAAOC,CAAAA,eAAP,KAA2B,6BAA3B,CACA,OAASC,iBAAT,KAAkC,+BAAlC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,G,GAEMC,CAAAA,G,2TASJC,mB,CAAsB,I,4FAEF,iBAClB,KAAKA,mBAAL,CAA2BL,IAAI,CAACM,kBAAL,0FAAwB,iBAAOC,IAAP,gJACzCL,cADyC,CACtB,MAAI,CAACM,KADiB,CACzCN,cADyC,KAG7CK,IAH6C,+CAKtBN,CAAAA,eAAe,CAACM,IAAD,CALO,QAKzCE,UALyC,eAO/C;AACA;AACA;AACAA,UAAU,CAACC,UAAX,CAAsB,SAACC,QAAD,CAAc,CAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,cAAc,gBACZU,EAAE,CAAED,QAAQ,CAACC,EADD,EAETD,QAAQ,CAACE,IAAT,EAFS,EAAd,CAID,CAhBD,EAV+C,6BA4B/CX,cAAc,CAACK,IAAD,CAAd,CA5B+C,sDAAxB,+DAA3B,CA+BD,C,mEAEsB,CACrB,KAAKF,mBAAL,GACD,C,uCAEQ,iBACP,mBACE,aAAK,SAAS,CAAC,KAAf,wBAGE,KAAC,MAAD,IAHF,cAIE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEb,QAAjC,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,SAAS,CAAEC,IAA/B,EAFF,cAGE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,WAAlB,CAA8B,SAAS,CAAEM,QAAzC,EAHF,cAIE,KAAC,KAAD,EACE,KAAK,KADP,CAEE,IAAI,CAAC,SAFP,CAGE,MAAM,CAAE,wBACN,CAAA,MAAI,CAACS,KAAL,CAAWM,WAAX,cACE,KAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EADF,cAGE,KAAC,UAAD,IAJI,EAHV,EAJF,GAJF,GADF,CAuBD,C,iBAzEe1B,KAAK,CAAC2B,S,EA4ExB;AACA,GAAMC,CAAAA,eAAe,CAAG1B,wBAAwB,CAAC,CAC/CwB,WAAW,CAAEX,iBADkC,CAAD,CAAhD,CAIA,GAAMc,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,QAAe,CACxChB,cAAc,CAAE,wBAACK,IAAD,QAAUW,CAAAA,QAAQ,CAAChB,eAAc,CAACK,IAAD,CAAf,CAAlB,EADwB,CAAf,EAA3B,CAIA,cAAehB,CAAAA,UAAU,CAACF,OAAO,CAAC2B,eAAD,CAAkBC,kBAAlB,CAAP,CAA6Cb,GAA7C,CAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { HomePage } from \"./pages/homepage/homepage.page.jsx\";\nimport Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\nimport SignInPage from \"./pages/signpage/signpage.component\";\nimport CheckOut from \"./pages/checkout/checkout.pages\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\nimport setCurrentUser from \"./redux/users/users.actions\";\nimport { selectCurrentUser } from \"./redux/users/users.selectors\";\n\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n\n// const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\nclass App extends React.Component {\n  // constructor() {\n  //   super();\n\n  //   this.state = {\n  //     currentUser: null,\n  //   };\n  // }\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (user) => {\n      const { setCurrentUser } = this.props;\n\n      if (user) {\n        // create new user\n        const userDocRef = await createUserDocDB(user);\n\n        // using the snapShot method which gives us both the data and the id\n        // we can call the data() method on the docRef to get the data in the JSON format and the id can be\n        // found on the snapShot object!!\n        userDocRef.onSnapshot((snapShot) => {\n          // this.setState(\n          //   {\n          //     currentUser: {\n          //       id: snapShot.id,\n          //       ...snapShot.data(),\n          //     },\n          //   },\n          //   () => {\n          //     console.log(this.state);\n          //   }\n          // );\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data(),\n          });\n        });\n      } else {\n        setCurrentUser(user);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* {console.log(this.props)} */}\n        {/* <Header currentUser={this.state.currentUser} /> */}\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={Shop} />\n          <Route exact path=\"/checkout\" component={CheckOut} />\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\"></Redirect>\n              ) : (\n                <SignInPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// subscriber function: constantly listens for any change!!(like an event Listener)\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n"]},"metadata":{},"sourceType":"module"}