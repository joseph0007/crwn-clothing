{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyD0t0p_x2kCQrDcddndYcVxZZwGVdyG8MQ\",\n  authDomain: \"crwn-clothing-e93a4.firebaseapp.com\",\n  databaseURL: \"https://crwn-clothing-e93a4.firebaseio.com\",\n  projectId: \"crwn-clothing-e93a4\",\n  storageBucket: \"crwn-clothing-e93a4.appspot.com\",\n  messagingSenderId: \"847126168089\",\n  appId: \"1:847126168089:web:8e2055bde8d2aea7a86088\",\n  measurementId: \"G-QBRKGPD4LE\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserDocDB = async (userAuth, additionalData) => {\n  // if no user dont create any document!!\n  if (!userAuth) return; // check if the user already exist\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnap = await userRef.get(); // console.log(userRef, userSnap);\n  // if not then create new user\n\n  if (!userSnap.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"user not created\", error);\n    }\n  }\n\n  return userRef;\n}; // fetching shop data\n\nexport const fetchShopData = shopDataRef => {\n  const transformedSopData = shopDataRef.docs.map(el => {\n    const {\n      title,\n      items\n    } = el.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      items,\n      title,\n      id: el.id\n    };\n  }); // converting/normalizing array to object using reduce (very cool)\n\n  return transformedSopData.reduce((acc, el) => {\n    acc[el.title.toLowerCase()] = el;\n    return acc;\n  }, {}); // console.log(transformedSopData);\n};\n/* --------------------------- return user object --------------------------- */\n\nexport const userRef = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged(authUser => {\n    unsubscribe();\n    resolve(authUser);\n  }, reject);\n}); // google authentication popup\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase; // USER AUTHENTICATED SESSION PERSISTENCE","map":{"version":3,"sources":["C:/React/crwn-clothing/src/utils/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserDocDB","userAuth","additionalData","userRef","doc","uid","userSnap","get","exists","displayName","email","createdAt","Date","set","error","console","log","fetchShopData","shopDataRef","transformedSopData","docs","map","el","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","Promise","resolve","reject","unsubscribe","onAuthStateChanged","authUser","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyD0t0p_x2kCQrDcddndYcVxZZwGVdyG8MQ\",\r\n  authDomain: \"crwn-clothing-e93a4.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-clothing-e93a4.firebaseio.com\",\r\n  projectId: \"crwn-clothing-e93a4\",\r\n  storageBucket: \"crwn-clothing-e93a4.appspot.com\",\r\n  messagingSenderId: \"847126168089\",\r\n  appId: \"1:847126168089:web:8e2055bde8d2aea7a86088\",\r\n  measurementId: \"G-QBRKGPD4LE\",\r\n};\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const createUserDocDB = async (userAuth, additionalData) => {\r\n  // if no user dont create any document!!\r\n  if (!userAuth) return;\r\n\r\n  // check if the user already exist\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  const userSnap = await userRef.get();\r\n\r\n  // console.log(userRef, userSnap);\r\n\r\n  // if not then create new user\r\n  if (!userSnap.exists) {\r\n    const { displayName, email } = userAuth;\r\n\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"user not created\", error);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\n// fetching shop data\r\nexport const fetchShopData = (shopDataRef) => {\r\n  const transformedSopData = shopDataRef.docs.map((el) => {\r\n    const { title, items } = el.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      items,\r\n      title,\r\n      id: el.id,\r\n    };\r\n  });\r\n\r\n  // converting/normalizing array to object using reduce (very cool)\r\n  return transformedSopData.reduce((acc, el) => {\r\n    acc[el.title.toLowerCase()] = el;\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  // console.log(transformedSopData);\r\n};\r\n\r\n/* --------------------------- return user object --------------------------- */\r\nexport const userRef = () =>\r\n  new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n      unsubscribe();\r\n      resolve(authUser);\r\n    }, reject);\r\n  });\r\n\r\n// google authentication popup\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;\r\n\r\n// USER AUTHENTICATED SESSION PERSISTENCE\r\n"]},"metadata":{},"sourceType":"module"}