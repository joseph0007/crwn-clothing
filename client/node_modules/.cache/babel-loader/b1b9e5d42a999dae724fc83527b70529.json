{"ast":null,"code":"import{createSelector}from\"reselect\";import memoize from\"lodash.memoize\";var selectShop=function selectShop(state){return state.shop;};export var selectShopItems=createSelector([selectShop],function(shop){return shop.shop_data;});export var selectShopItemsArr=createSelector([selectShop],function(shop){return Object.keys(shop.shop_data).map(function(key){return shop.shop_data[key];});});/**\r\n * One quick addition, our selectCategory function we just wrote is not memoized due to categoryUrlParam being passed in from\r\n * our category component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCategory\r\n *  function. In this case categoryUrlParam is a dynamic argument meaning it can change, so to memoize selectCategory we actually\r\n * have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize\r\n * helper function by adding it our packages like so:\r\n *\r\n * By wrapping this function is memoize, we're saying that whenever this function gets called and receives categoryUrlParam,\r\n * I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the\r\n * same categoryUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just\r\n * return the selector that's been stored.\r\n * */export var selectCategory=memoize(function(categoryUrlParams){return(// we normalised the shop_data from an array to an object so that we can efficiently find the data without performance issue!!\ncreateSelector([selectShopItems],function(shop_data){return shop_data[categoryUrlParams];}));});","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectShopItems","shop_data","selectShopItemsArr","Object","keys","map","key","selectCategory","categoryUrlParams"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAnB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,CAE3C,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACE,SAAf,EAF2C,CAAtC,CAKP,MAAO,IAAMC,CAAAA,kBAAkB,CAAGP,cAAc,CAAC,CAACE,UAAD,CAAD,CAAe,SAACE,IAAD,QAC7DI,CAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACE,SAAjB,EAA4BI,GAA5B,CAAgC,SAACC,GAAD,QAASP,CAAAA,IAAI,CAACE,SAAL,CAAeK,GAAf,CAAT,EAAhC,CAD6D,EAAf,CAAzC,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACA,MAAO,IAAMC,CAAAA,cAAc,CAAGX,OAAO,CAAC,SAACY,iBAAD,QACpC;AACAb,cAAc,CAAC,CAACK,eAAD,CAAD,CAAoB,SAACC,SAAD,QAAeA,CAAAA,SAAS,CAACO,iBAAD,CAAxB,EAApB,CAFsB,GAAD,CAA9B","sourcesContent":["import { createSelector } from \"reselect\";\r\nimport memoize from \"lodash.memoize\";\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectShopItems = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.shop_data\r\n);\r\n\r\nexport const selectShopItemsArr = createSelector([selectShop], (shop) =>\r\n  Object.keys(shop.shop_data).map((key) => shop.shop_data[key])\r\n);\r\n\r\n/**\r\n * One quick addition, our selectCategory function we just wrote is not memoized due to categoryUrlParam being passed in from\r\n * our category component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCategory\r\n *  function. In this case categoryUrlParam is a dynamic argument meaning it can change, so to memoize selectCategory we actually\r\n * have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize\r\n * helper function by adding it our packages like so:\r\n *\r\n * By wrapping this function is memoize, we're saying that whenever this function gets called and receives categoryUrlParam,\r\n * I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the\r\n * same categoryUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just\r\n * return the selector that's been stored.\r\n * */\r\nexport const selectCategory = memoize((categoryUrlParams) =>\r\n  // we normalised the shop_data from an array to an object so that we can efficiently find the data without performance issue!!\r\n  createSelector([selectShopItems], (shop_data) => shop_data[categoryUrlParams])\r\n);\r\n"]},"metadata":{},"sourceType":"module"}