{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\React\\\\crwn-clothing\\\\src\\\\App.js\";\nimport React, { lazy, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./App.css\"; // import { HomePage } from \"./pages/homepage/homepage.page.jsx\";\n// import Shop from \"./pages/shoppage/shoppage.page\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\"; // import SignInPage from \"./pages/signpage/signpage.component\";\n// import CheckOut from \"./pages/checkout/checkout.pages\";\n\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\nimport { checkUserAuthStateStart } from \"./redux/users/users.actions\";\nimport { selectCurrentUser } from \"./redux/users/users.selectors\";\nimport Spinner from \"./components/spinner/spinner.component\";\nimport ErrorBoundary from \"./components/error-boundary/error-boundary.component\"; // lazy loading\n\nconst HomePage = /*#__PURE__*/lazy(_c = () => import(\"./pages/homepage/homepage.page.jsx\"));\n_c2 = HomePage;\nconst Shop = /*#__PURE__*/lazy(_c3 = () => import(\"./pages/shoppage/shoppage.page\"));\n_c4 = Shop;\nconst CheckOut = /*#__PURE__*/lazy(_c5 = () => import(\"./pages/checkout/checkout.pages\"));\n_c6 = CheckOut;\nconst SignInPage = /*#__PURE__*/lazy(_c7 = () => import(\"./pages/signpage/signpage.component\"));\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n// const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\n_c8 = SignInPage;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      checkUserAuthState\n    } = this.props;\n    checkUserAuthState();\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n          children: /*#__PURE__*/_jsxDEV(Suspense, {\n            fallback: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this),\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              component: HomePage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/shop\",\n              component: Shop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/checkout\",\n              component: CheckOut\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/signin\",\n              render: () => this.props.currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n                to: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(SignInPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n} // subscriber function: constantly listens for any change!!(like an event Listener)\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // ownProps is the props that are passed to the element when it is called somewhere!!\n// react-redux re-renders the component when the new props are passed and the ownProps is passed as second argument to\n// mapDispatchToProps function!! but it will not re-render even if props change when ownProps is not passed!\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserAuthState: () => dispatch(checkUserAuthStateStart())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"HomePage$lazy\");\n$RefreshReg$(_c2, \"HomePage\");\n$RefreshReg$(_c3, \"Shop$lazy\");\n$RefreshReg$(_c4, \"Shop\");\n$RefreshReg$(_c5, \"CheckOut$lazy\");\n$RefreshReg$(_c6, \"CheckOut\");\n$RefreshReg$(_c7, \"SignInPage$lazy\");\n$RefreshReg$(_c8, \"SignInPage\");","map":{"version":3,"sources":["C:/React/crwn-clothing/src/App.js"],"names":["React","lazy","Suspense","connect","createStructuredSelector","withRouter","Route","Switch","Redirect","Header","auth","createUserDocDB","checkUserAuthStateStart","selectCurrentUser","Spinner","ErrorBoundary","HomePage","Shop","CheckOut","SignInPage","App","Component","unsubscribeFromAuth","componentDidMount","checkUserAuthState","props","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { lazy, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\n// import { HomePage } from \"./pages/homepage/homepage.page.jsx\";\n// import Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\n// import SignInPage from \"./pages/signpage/signpage.component\";\n// import CheckOut from \"./pages/checkout/checkout.pages\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\nimport { checkUserAuthStateStart } from \"./redux/users/users.actions\";\nimport { selectCurrentUser } from \"./redux/users/users.selectors\";\nimport Spinner from \"./components/spinner/spinner.component\";\nimport ErrorBoundary from \"./components/error-boundary/error-boundary.component\";\n\n// lazy loading\nconst HomePage = lazy(() => import(\"./pages/homepage/homepage.page.jsx\"));\nconst Shop = lazy(() => import(\"./pages/shoppage/shoppage.page\"));\nconst CheckOut = lazy(() => import(\"./pages/checkout/checkout.pages\"));\nconst SignInPage = lazy(() => import(\"./pages/signpage/signpage.component\"));\n\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n\n// const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\nclass App extends React.Component {\n  // constructor() {\n  //   super();\n\n  //   this.state = {\n  //     currentUser: null,\n  //     // is used to get access to the actualDOM element (ref.current)\n  //     // ref={this.state.ref} should be passed into the element that you want the reference of !!\n  //     ref: React.createRef(),\n  //   };\n  // }\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    const { checkUserAuthState } = this.props;\n\n    checkUserAuthState();\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* {console.log(this.state.ref)} */}\n        {/* {console.log(this.props)} */}\n        {/* <Header currentUser={this.state.currentUser} /> */}\n        <Header />\n        <Switch>\n          <ErrorBoundary>\n            <Suspense fallback={<Spinner />}>\n              <Route exact path=\"/\" component={HomePage} />\n              <Route path=\"/shop\" component={Shop} />\n              <Route exact path=\"/checkout\" component={CheckOut} />\n              <Route\n                exact\n                path=\"/signin\"\n                render={() =>\n                  this.props.currentUser ? (\n                    <Redirect to=\"/\"></Redirect>\n                  ) : (\n                    <SignInPage />\n                  )\n                }\n              />\n            </Suspense>\n          </ErrorBoundary>\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// subscriber function: constantly listens for any change!!(like an event Listener)\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n});\n\n// ownProps is the props that are passed to the element when it is called somewhere!!\n// react-redux re-renders the component when the new props are passed and the ownProps is passed as second argument to\n// mapDispatchToProps function!! but it will not re-render even if props change when ownProps is not passed!\nconst mapDispatchToProps = (dispatch) => ({\n  checkUserAuthState: () => dispatch(checkUserAuthStateStart()),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n"]},"metadata":{},"sourceType":"module"}