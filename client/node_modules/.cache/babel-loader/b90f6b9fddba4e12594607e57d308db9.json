{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\";\n\nconst selectShop = state => state.shop;\n\nexport const selectShopItems = createSelector([selectShop], shop => shop.shop_data);\nexport const selectShopItemsArr = createSelector([selectShop], shop => {\n  return shop.shop_data ? Object.keys(shop.shop_data).map(key => shop.shop_data[key]) : [];\n});\n/**\r\n * One quick addition, our selectCategory function we just wrote is not memoized due to categoryUrlParam being passed in from\r\n * our category component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCategory\r\n *  function. In this case categoryUrlParam is a dynamic argument meaning it can change, so to memoize selectCategory we actually\r\n * have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize\r\n * helper function by adding it our packages like so:\r\n *\r\n * By wrapping this function is memoize, we're saying that whenever this function gets called and receives categoryUrlParam,\r\n * I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the\r\n * same categoryUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just\r\n * return the selector that's been stored.\r\n * */\n\nexport const selectCategory = memoize(categoryUrlParams => // we normalised the shop_data from an array to an object so that we can efficiently find the data without performance issue!!\ncreateSelector([selectShopItems], shop_data => shop_data[categoryUrlParams]));\nexport const selectIsFetching = createSelector([selectShop], shop => shop.isFetching);\nexport const isShopDataLoaded = createSelector([selectShop], shop => !!shop.shop_data);","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectShopItems","shop_data","selectShopItemsArr","Object","keys","map","key","selectCategory","categoryUrlParams","selectIsFetching","isFetching","isShopDataLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,eAAe,GAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,EAE1CE,IAAD,IAAUA,IAAI,CAACE,SAF4B,CAAtC;AAKP,OAAO,MAAMC,kBAAkB,GAAGP,cAAc,CAAC,CAACE,UAAD,CAAD,EAAgBE,IAAD,IAAU;AACvE,SAAOA,IAAI,CAACE,SAAL,GACHE,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACE,SAAjB,EAA4BI,GAA5B,CAAiCC,GAAD,IAASP,IAAI,CAACE,SAAL,CAAeK,GAAf,CAAzC,CADG,GAEH,EAFJ;AAGD,CAJ+C,CAAzC;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGX,OAAO,CAAEY,iBAAD,IACpC;AACAb,cAAc,CAAC,CAACK,eAAD,CAAD,EAAqBC,SAAD,IAAeA,SAAS,CAACO,iBAAD,CAA5C,CAFqB,CAA9B;AAKP,OAAO,MAAMC,gBAAgB,GAAGd,cAAc,CAC5C,CAACE,UAAD,CAD4C,EAE3CE,IAAD,IAAUA,IAAI,CAACW,UAF6B,CAAvC;AAKP,OAAO,MAAMC,gBAAgB,GAAGhB,cAAc,CAC5C,CAACE,UAAD,CAD4C,EAE3CE,IAAD,IAAU,CAAC,CAACA,IAAI,CAACE,SAF2B,CAAvC","sourcesContent":["import { createSelector } from \"reselect\";\r\nimport memoize from \"lodash.memoize\";\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectShopItems = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.shop_data\r\n);\r\n\r\nexport const selectShopItemsArr = createSelector([selectShop], (shop) => {\r\n  return shop.shop_data\r\n    ? Object.keys(shop.shop_data).map((key) => shop.shop_data[key])\r\n    : [];\r\n});\r\n\r\n/**\r\n * One quick addition, our selectCategory function we just wrote is not memoized due to categoryUrlParam being passed in from\r\n * our category component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCategory\r\n *  function. In this case categoryUrlParam is a dynamic argument meaning it can change, so to memoize selectCategory we actually\r\n * have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize\r\n * helper function by adding it our packages like so:\r\n *\r\n * By wrapping this function is memoize, we're saying that whenever this function gets called and receives categoryUrlParam,\r\n * I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the\r\n * same categoryUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just\r\n * return the selector that's been stored.\r\n * */\r\nexport const selectCategory = memoize((categoryUrlParams) =>\r\n  // we normalised the shop_data from an array to an object so that we can efficiently find the data without performance issue!!\r\n  createSelector([selectShopItems], (shop_data) => shop_data[categoryUrlParams])\r\n);\r\n\r\nexport const selectIsFetching = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.isFetching\r\n);\r\n\r\nexport const isShopDataLoaded = createSelector(\r\n  [selectShop],\r\n  (shop) => !!shop.shop_data\r\n);\r\n"]},"metadata":{},"sourceType":"module"}