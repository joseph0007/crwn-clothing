{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\React\\\\crwn-clothing\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport { HomePage } from \"./pages/homepage/homepage.page.jsx\";\nimport Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\nimport SignInPage from \"./pages/signpage/signpage.component\";\nimport CheckOut from \"./pages/checkout/checkout.pages\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\nimport setCurrentUser from \"./redux/users/users.actions\";\nimport { selectCurrentUser } from \"./redux/users/users.selectors\";\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n// const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.unsubscribeFromAuth = null;\n    this.state = {\n      currentUser: null,\n      ref: /*#__PURE__*/React.createRef()\n    };\n  }\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async user => {\n      const {\n        setCurrentUser\n      } = this.props;\n\n      if (user) {\n        // create new user\n        const userDocRef = await createUserDocDB(user); // using the snapShot method which gives us both the data and the id\n        // we can call the data() method on the docRef to get the data in the JSON format and the id can be\n        // found on the snapShot object!!\n\n        userDocRef.onSnapshot(snapShot => {\n          // this.setState(\n          //   {\n          //     currentUser: {\n          //       id: snapShot.id,\n          //       ...snapShot.data(),\n          //     },\n          //   },\n          //   () => {\n          //     console.log(this.state);\n          //   }\n          // );\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      } else {\n        setCurrentUser(user);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          component: Shop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/checkout\",\n          component: CheckOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signin\",\n          render: () => this.props.currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SignInPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n} // subscriber function: constantly listens for any change!!(like an event Listener)\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));","map":{"version":3,"sources":["C:/React/crwn-clothing/src/App.js"],"names":["React","connect","createStructuredSelector","withRouter","HomePage","Shop","Route","Switch","Redirect","Header","SignInPage","CheckOut","auth","createUserDocDB","setCurrentUser","selectCurrentUser","App","Component","constructor","unsubscribeFromAuth","state","currentUser","ref","createRef","componentDidMount","onAuthStateChanged","user","props","userDocRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { HomePage } from \"./pages/homepage/homepage.page.jsx\";\nimport Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\nimport SignInPage from \"./pages/signpage/signpage.component\";\nimport CheckOut from \"./pages/checkout/checkout.pages\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\nimport setCurrentUser from \"./redux/users/users.actions\";\nimport { selectCurrentUser } from \"./redux/users/users.selectors\";\n\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n\n// const Hats = (props) => (\n//   <div>\n//     {console.log(props)}\n//     <h1>Hats</h1>\n//   </div>\n// );\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentUser: null,\n      ref: React.createRef(),\n    };\n  }\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (user) => {\n      const { setCurrentUser } = this.props;\n\n      if (user) {\n        // create new user\n        const userDocRef = await createUserDocDB(user);\n\n        // using the snapShot method which gives us both the data and the id\n        // we can call the data() method on the docRef to get the data in the JSON format and the id can be\n        // found on the snapShot object!!\n        userDocRef.onSnapshot((snapShot) => {\n          // this.setState(\n          //   {\n          //     currentUser: {\n          //       id: snapShot.id,\n          //       ...snapShot.data(),\n          //     },\n          //   },\n          //   () => {\n          //     console.log(this.state);\n          //   }\n          // );\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data(),\n          });\n        });\n      } else {\n        setCurrentUser(user);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* {console.log(this.props)} */}\n        {/* <Header currentUser={this.state.currentUser} /> */}\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={Shop} />\n          <Route exact path=\"/checkout\" component={CheckOut} />\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\"></Redirect>\n              ) : (\n                <SignInPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// subscriber function: constantly listens for any change!!(like an event Listener)\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n"]},"metadata":{},"sourceType":"module"}