{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { firestore } from \"../../utils/firebase/firebase.utils\";\nimport { shopTypes } from \"./shop.types\";\nimport { fetchShopDataSuccess, fetchShopDataFailure } from \"./shop.actions\";\nexport const fetchShopData = function* (action) {\n  try {\n    const shopDataRef = firestore.collection(\"shopData\");\n    const shopData = yield call(shopDataRef.get());\n    return yield put(fetchShopDataSuccess(shopData));\n  } catch (error) {\n    return yield put(fetchShopDataFailure(error.message));\n  }\n};\nexport const fetchShopCollectionsAsync = function* () {\n  // takeEvery() listens for actions that gets dispatched due to some actions and then catches it!!\n  yield takeEvery(shopTypes.FETCH_SHOPDATA_PROCESSING, fetchShopData);\n};\n/**\r\n * export const fetchShopCollectionsAsync = () => (dispatch) => {\r\n  // step1: set the isFetching to true\r\n  dispatch(fetchShopDataProcessing());\r\n\r\n  const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n  shopDataRef\r\n    .get()\r\n    .then((snapshot) => {\r\n      const shopData = fetchShopData(snapshot);\r\n\r\n      // shopDataUpdater(shopData);\r\n      // step2: if shopdata successfully retrieved then dispatch the success action\r\n      dispatch(fetchShopDataSuccess(shopData));\r\n\r\n      //remove the isLoading\r\n      // this.setState({ isLoading: false });\r\n    })\r\n    .catch((err) => {\r\n      dispatch(fetchShopDataFailure(err.message));\r\n    });\r\n};\r\n */","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["call","put","takeEvery","firestore","shopTypes","fetchShopDataSuccess","fetchShopDataFailure","fetchShopData","action","shopDataRef","collection","shopData","get","error","message","fetchShopCollectionsAsync","FETCH_SHOPDATA_PROCESSING"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,gBAA3D;AAEA,OAAO,MAAMC,aAAa,GAAG,WAAWC,MAAX,EAAmB;AAC9C,MAAI;AACF,UAAMC,WAAW,GAAGN,SAAS,CAACO,UAAV,CAAqB,UAArB,CAApB;AAEA,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACS,WAAW,CAACG,GAAZ,EAAD,CAA3B;AAEA,WAAO,MAAMX,GAAG,CAACI,oBAAoB,CAACM,QAAD,CAArB,CAAhB;AACD,GAND,CAME,OAAOE,KAAP,EAAc;AACd,WAAO,MAAMZ,GAAG,CAACK,oBAAoB,CAACO,KAAK,CAACC,OAAP,CAArB,CAAhB;AACD;AACF,CAVM;AAYP,OAAO,MAAMC,yBAAyB,GAAG,aAAa;AACpD;AACA,QAAMb,SAAS,CAACE,SAAS,CAACY,yBAAX,EAAsCT,aAAtC,CAAf;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { firestore } from \"../../utils/firebase/firebase.utils\";\r\nimport { shopTypes } from \"./shop.types\";\r\nimport { fetchShopDataSuccess, fetchShopDataFailure } from \"./shop.actions\";\r\n\r\nexport const fetchShopData = function* (action) {\r\n  try {\r\n    const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n    const shopData = yield call(shopDataRef.get());\r\n\r\n    return yield put(fetchShopDataSuccess(shopData));\r\n  } catch (error) {\r\n    return yield put(fetchShopDataFailure(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchShopCollectionsAsync = function* () {\r\n  // takeEvery() listens for actions that gets dispatched due to some actions and then catches it!!\r\n  yield takeEvery(shopTypes.FETCH_SHOPDATA_PROCESSING, fetchShopData);\r\n};\r\n\r\n/**\r\n * export const fetchShopCollectionsAsync = () => (dispatch) => {\r\n  // step1: set the isFetching to true\r\n  dispatch(fetchShopDataProcessing());\r\n\r\n  const shopDataRef = firestore.collection(\"shopData\");\r\n\r\n  shopDataRef\r\n    .get()\r\n    .then((snapshot) => {\r\n      const shopData = fetchShopData(snapshot);\r\n\r\n      // shopDataUpdater(shopData);\r\n      // step2: if shopdata successfully retrieved then dispatch the success action\r\n      dispatch(fetchShopDataSuccess(shopData));\r\n\r\n      //remove the isLoading\r\n      // this.setState({ isLoading: false });\r\n    })\r\n    .catch((err) => {\r\n      dispatch(fetchShopDataFailure(err.message));\r\n    });\r\n};\r\n */\r\n"]},"metadata":{},"sourceType":"module"}