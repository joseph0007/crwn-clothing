{"ast":null,"code":"import { takeLatest, put, call, all, takeEvery } from \"redux-saga/effects\";\nimport userTypes from \"./user.types\";\nimport { auth, googleProvider, createUserDocDB, userRef } from \"../../utils/firebase/firebase.utils\";\nimport { userLogoutSuccess, userLogoutFailure, signInFailure, signInSuccess, signUpFailure, signUpSuccess } from \"./users.actions\";\nexport function* getUserSnapShot(userAuth) {\n  try {\n    const userDocRef = yield call(createUserDocDB, userAuth);\n    const userSnapShot = yield userDocRef.get(); // console.log(\"user Obj\", userSnapShot);\n\n    yield put(signInSuccess(userSnapShot));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n/* ----------------------------- google sign in ----------------------------- */\n\nexport function* googleSignInStart() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getUserSnapShot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isGoogleSignIn() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\n}\n/* ------------------------------ email sign in ----------------------------- */\n\nexport function* emailAndPassLogin({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getUserSnapShot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* emailAndPassLoginAsync() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailAndPassLogin);\n}\n/* ------------------- check user session for persistence ------------------- */\n\nexport function* checkUserAuth() {\n  try {\n    const userDocRef = yield userRef(); // console.log(userDocRef);\n\n    if (!userDocRef) return;\n    yield getUserSnapShot(userDocRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* checkUserAuthAsync() {\n  yield takeEvery(userTypes.CHECK_USER_AUTH_STATE, checkUserAuth);\n}\n/* --------------------------------- logout --------------------------------- */\n\nexport function* logout() {\n  try {\n    const userRef = yield auth.signOut();\n    console.log(userRef);\n    yield put(userLogoutSuccess());\n  } catch (error) {\n    yield put(userLogoutFailure(error));\n  }\n}\nexport function* userLogoutAsync() {\n  yield takeEvery(userTypes.USER_LOGOUT_START, logout);\n}\n/* --------------------------------- sign up -------------------------------- */\n\nexport function* emailAndPassSignUp({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password,\n      name\n    } = payload;\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserDocDB, user, {\n      displayName: name\n    });\n    const userSnapShot = yield userRef.get();\n    yield put(signUpSuccess(userSnapShot));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* emailAndPassSignUpAsync() {\n  yield takeLatest(userTypes.SIGN_UP_START, emailAndPassSignUp);\n}\nexport function* userSagas() {\n  yield all([call(isGoogleSignIn), call(userLogoutAsync), call(emailAndPassLoginAsync), call(checkUserAuthAsync), call(emailAndPassSignUpAsync)]);\n}","map":{"version":3,"sources":["C:/React/crwn-clothing/client/src/redux/users/user.sagas.js"],"names":["takeLatest","put","call","all","takeEvery","userTypes","auth","googleProvider","createUserDocDB","userRef","userLogoutSuccess","userLogoutFailure","signInFailure","signInSuccess","signUpFailure","signUpSuccess","getUserSnapShot","userAuth","userDocRef","userSnapShot","get","error","googleSignInStart","user","signInWithPopup","isGoogleSignIn","GOOGLE_SIGN_IN_START","emailAndPassLogin","payload","email","password","signInWithEmailAndPassword","emailAndPassLoginAsync","EMAIL_SIGN_IN_START","checkUserAuth","checkUserAuthAsync","CHECK_USER_AUTH_STATE","logout","signOut","console","log","userLogoutAsync","USER_LOGOUT_START","emailAndPassSignUp","name","createUserWithEmailAndPassword","displayName","emailAndPassSignUpAsync","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all, takeEvery } from \"redux-saga/effects\";\r\nimport userTypes from \"./user.types\";\r\n\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserDocDB,\r\n  userRef,\r\n} from \"../../utils/firebase/firebase.utils\";\r\nimport {\r\n  userLogoutSuccess,\r\n  userLogoutFailure,\r\n  signInFailure,\r\n  signInSuccess,\r\n  signUpFailure,\r\n  signUpSuccess,\r\n} from \"./users.actions\";\r\n\r\nexport function* getUserSnapShot(userAuth) {\r\n  try {\r\n    const userDocRef = yield call(createUserDocDB, userAuth);\r\n    const userSnapShot = yield userDocRef.get();\r\n\r\n    // console.log(\"user Obj\", userSnapShot);\r\n\r\n    yield put(signInSuccess(userSnapShot));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n/* ----------------------------- google sign in ----------------------------- */\r\nexport function* googleSignInStart() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n\r\n    yield getUserSnapShot(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isGoogleSignIn() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\r\n}\r\n\r\n/* ------------------------------ email sign in ----------------------------- */\r\nexport function* emailAndPassLogin({ payload }) {\r\n  try {\r\n    const { email, password } = payload;\r\n\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getUserSnapShot(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* emailAndPassLoginAsync() {\r\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailAndPassLogin);\r\n}\r\n\r\n/* ------------------- check user session for persistence ------------------- */\r\n\r\nexport function* checkUserAuth() {\r\n  try {\r\n    const userDocRef = yield userRef();\r\n\r\n    // console.log(userDocRef);\r\n\r\n    if (!userDocRef) return;\r\n\r\n    yield getUserSnapShot(userDocRef);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* checkUserAuthAsync() {\r\n  yield takeEvery(userTypes.CHECK_USER_AUTH_STATE, checkUserAuth);\r\n}\r\n\r\n/* --------------------------------- logout --------------------------------- */\r\nexport function* logout() {\r\n  try {\r\n    const userRef = yield auth.signOut();\r\n\r\n    console.log(userRef);\r\n\r\n    yield put(userLogoutSuccess());\r\n  } catch (error) {\r\n    yield put(userLogoutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* userLogoutAsync() {\r\n  yield takeEvery(userTypes.USER_LOGOUT_START, logout);\r\n}\r\n\r\n/* --------------------------------- sign up -------------------------------- */\r\nexport function* emailAndPassSignUp({ payload }) {\r\n  try {\r\n    const { email, password, name } = payload;\r\n\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n\r\n    const userRef = yield call(createUserDocDB, user, { displayName: name });\r\n    const userSnapShot = yield userRef.get();\r\n\r\n    yield put(signUpSuccess(userSnapShot));\r\n  } catch (error) {\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\nexport function* emailAndPassSignUpAsync() {\r\n  yield takeLatest(userTypes.SIGN_UP_START, emailAndPassSignUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(isGoogleSignIn),\r\n    call(userLogoutAsync),\r\n    call(emailAndPassLoginAsync),\r\n    call(checkUserAuthAsync),\r\n    call(emailAndPassSignUpAsync),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}