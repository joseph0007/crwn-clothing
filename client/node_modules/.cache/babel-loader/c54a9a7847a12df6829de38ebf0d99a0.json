{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\React\\\\crwn-clothing\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { HomePage } from \"./pages/homepage/homepage.page.jsx\";\nimport Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\nimport SignInPage from \"./pages/signpage/signpage.component\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n\nconst Hats = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [console.log(props), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hats\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\n\n_c = Hats;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.unsubscribeFromAuth = null;\n    this.state = {\n      currentUser: null\n    };\n  }\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async user => {\n      if (user) {\n        // create new user\n        const userDocRef = await createUserDocDB(user); // using the snapShot method which gives us both the data and the id\n        // we can call the data() method on the docRef to get the data in the JSON format and the id can be\n        // found on the snapShot object!!\n\n        userDocRef.onSnapshot(function (snapShot) {\n          this.setState({\n            id: snapShot.id,\n            ...snapShot.data()\n          }, () => {\n            console.log(this.state);\n          });\n        }).call(this);\n      } else {\n        this.setState({\n          currentUser: user\n        }, () => {\n          console.log(this.state);\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        currentUser: this.state.currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          component: Shop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          component: SignInPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hats\");","map":{"version":3,"sources":["C:/React/crwn-clothing/src/App.js"],"names":["React","HomePage","Shop","Route","Switch","Header","SignInPage","auth","createUserDocDB","Hats","props","console","log","App","Component","constructor","unsubscribeFromAuth","state","currentUser","componentDidMount","onAuthStateChanged","user","userDocRef","onSnapshot","snapShot","setState","id","data","call","componentWillUnmount","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,oCAAzB;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,IAAT,EAAeC,eAAf,QAAsC,iCAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAIC,KAAD,iBACX;AAAA,aACGC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOA;AACA;AACA;AACA;AACA;;;KAXMD,I;;AAaN,MAAMI,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AADY,SAQdC,mBARc,GAQQ,IARR;AAGZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AAIDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,mBAAL,GAA2BT,IAAI,CAACa,kBAAL,CAAwB,MAAOC,IAAP,IAAgB;AACjE,UAAIA,IAAJ,EAAU;AACR;AACA,cAAMC,UAAU,GAAG,MAAMd,eAAe,CAACa,IAAD,CAAxC,CAFQ,CAIR;AACA;AACA;;AAEAC,QAAAA,UAAU,CACPC,UADH,CACc,UAAUC,QAAV,EAAoB;AAC9B,eAAKC,QAAL,CACE;AACEC,YAAAA,EAAE,EAAEF,QAAQ,CAACE,EADf;AAEE,eAAGF,QAAQ,CAACG,IAAT;AAFL,WADF,EAKE,MAAM;AACJhB,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAjB;AACD,WAPH;AASD,SAXH,EAYGW,IAZH,CAYQ,IAZR;AAaD,OArBD,MAqBO;AACL,aAAKH,QAAL,CACE;AACEP,UAAAA,WAAW,EAAEG;AADf,SADF,EAIE,MAAM;AACJV,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAjB;AACD,SANH;AAQD;AACF,KAhC0B,CAA3B;AAiCD;;AAEDY,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,mBAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAEjB;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAsB,UAAA,SAAS,EAAEI;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA9D+B;;AAiElC,eAAeO,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { HomePage } from \"./pages/homepage/homepage.page.jsx\";\nimport Shop from \"./pages/shoppage/shoppage.page\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/header/header.component\";\nimport SignInPage from \"./pages/signpage/signpage.component\";\nimport { auth, createUserDocDB } from \"./utils/firebase/firebase.utils\";\n\n/**\n * a common issue with client side rendering was the issue of routing as opposed to server side rendering where we render the\n * page on the server side and send the new html page to the client.\n * there was no way of routing and constructing url endpoints to hit different pages because we were not relying on server anymore\n * to render the html but instead the client!!\n * but this issue was solved with client side routing which useses something that was build into the browser to route!!\n */\n\nconst Hats = (props) => (\n  <div>\n    {console.log(props)}\n    <h1>Hats</h1>\n  </div>\n);\n\n/**\n * Switch component just checks for the route inside of it and renders the first component that matches the url endpoint and ignores the\n * rest of the route and thus solving the issue of multiple components getting rendered due to all the route getting hit!!\n *\n */\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentUser: null,\n    };\n  }\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        // create new user\n        const userDocRef = await createUserDocDB(user);\n\n        // using the snapShot method which gives us both the data and the id\n        // we can call the data() method on the docRef to get the data in the JSON format and the id can be\n        // found on the snapShot object!!\n\n        userDocRef\n          .onSnapshot(function (snapShot) {\n            this.setState(\n              {\n                id: snapShot.id,\n                ...snapShot.data(),\n              },\n              () => {\n                console.log(this.state);\n              }\n            );\n          })\n          .call(this);\n      } else {\n        this.setState(\n          {\n            currentUser: user,\n          },\n          () => {\n            console.log(this.state);\n          }\n        );\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header currentUser={this.state.currentUser} />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={Shop} />\n          <Route path=\"/signin\" component={SignInPage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}