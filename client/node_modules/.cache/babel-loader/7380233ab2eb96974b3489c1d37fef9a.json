{"ast":null,"code":"import{createSelector}from\"reselect\";var selectCart=function selectCart(state){return state.cart;};export var selectCartItems=createSelector([selectCart],function(cart){return cart.cartItems;});export var selectHidden=createSelector([selectCart],function(cart){return cart.hidden;});export var selectCartQuantity=createSelector([selectCart],function(cart){return cart.cartItems.reduce(function(acc,curr){return acc+=curr.quantity;},0);});export var selectCartTotal=createSelector([selectCart],function(cart){return cart.cartItems.reduce(function(acc,curr){return acc+=curr.quantity*curr.price;},0);});/**\r\n * selectors are a type of memoized function which remembers the previous arguments passed and previous result.\r\n * Its basically caching the arguments passed which helps in deciding whether to recompute the function or not.\r\n * React component re-renders if a new object is passed to it and so what selectors do is they decide if the arguments passed\r\n * bring any change or not and based on that passes the old values or new values. If the old values are passed then the react component\r\n * does not re-render and a lot of computing power is saved.\r\n */","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectHidden","hidden","selectCartQuantity","reduce","acc","curr","quantity","selectCartTotal","price"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAnB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,CAE3C,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACE,SAAf,EAF2C,CAAtC,CAKP,MAAO,IAAMC,CAAAA,YAAY,CAAGN,cAAc,CAAC,CAACC,UAAD,CAAD,CAAe,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACI,MAAf,EAAf,CAAnC,CAEP,MAAO,IAAMC,CAAAA,kBAAkB,CAAGR,cAAc,CAAC,CAACC,UAAD,CAAD,CAAe,SAACE,IAAD,QAC7DA,CAAAA,IAAI,CAACE,SAAL,CAAeI,MAAf,CAAsB,SAACC,GAAD,CAAMC,IAAN,QAAgBD,CAAAA,GAAG,EAAIC,IAAI,CAACC,QAA5B,EAAtB,CAA6D,CAA7D,CAD6D,EAAf,CAAzC,CAIP,MAAO,IAAMC,CAAAA,eAAe,CAAGb,cAAc,CAAC,CAACC,UAAD,CAAD,CAAe,SAACE,IAAD,QAC1DA,CAAAA,IAAI,CAACE,SAAL,CAAeI,MAAf,CAAsB,SAACC,GAAD,CAAMC,IAAN,QAAgBD,CAAAA,GAAG,EAAIC,IAAI,CAACC,QAAL,CAAgBD,IAAI,CAACG,KAA5C,EAAtB,CAA0E,CAA1E,CAD0D,EAAf,CAAtC,CAIP;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nconst selectCart = (state) => state.cart;\r\n\r\nexport const selectCartItems = createSelector(\r\n  [selectCart],\r\n  (cart) => cart.cartItems\r\n);\r\n\r\nexport const selectHidden = createSelector([selectCart], (cart) => cart.hidden);\r\n\r\nexport const selectCartQuantity = createSelector([selectCart], (cart) =>\r\n  cart.cartItems.reduce((acc, curr) => (acc += curr.quantity), 0)\r\n);\r\n\r\nexport const selectCartTotal = createSelector([selectCart], (cart) =>\r\n  cart.cartItems.reduce((acc, curr) => (acc += curr.quantity * curr.price), 0)\r\n);\r\n\r\n/**\r\n * selectors are a type of memoized function which remembers the previous arguments passed and previous result.\r\n * Its basically caching the arguments passed which helps in deciding whether to recompute the function or not.\r\n * React component re-renders if a new object is passed to it and so what selectors do is they decide if the arguments passed\r\n * bring any change or not and based on that passes the old values or new values. If the old values are passed then the react component\r\n * does not re-render and a lot of computing power is saved.\r\n */\r\n"]},"metadata":{},"sourceType":"module"}