{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport userTypes from \"./user.types\";\nimport { auth, googleProvider, createUserDocDB } from \"../../utils/firebase/firebase.utils\";\nimport { googleSignInFailure, googleSignInSuccess } from \"./users.actions\";\nexport function* googleSignInStart() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n\n    if (user) {\n      // create new user\n      const userDocRef = yield createUserDocDB(user);\n      userDocRef.onSnapshot(snapShot => {\n        googleSignInSuccess({\n          id: snapShot.id,\n          ...snapShot.data()\n        });\n      });\n    }\n  } catch (error) {\n    put(googleSignInFailure(error));\n  }\n}\nexport function* isGoogleSignIn() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\n}\nexport function* userSagas() {\n  yield all([call(isGoogleSignIn)]);\n}","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/users/user.sagas.js"],"names":["takeLatest","put","call","all","userTypes","auth","googleProvider","createUserDocDB","googleSignInFailure","googleSignInSuccess","googleSignInStart","user","signInWithPopup","userDocRef","onSnapshot","snapShot","id","data","error","isGoogleSignIn","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,eAHF,QAIO,qCAJP;AAKA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,iBAAzD;AAEA,OAAO,UAAUC,iBAAV,GAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACO,eAAL,CAAqBN,cAArB,CAAvB;;AAEA,QAAIK,IAAJ,EAAU;AACR;AACA,YAAME,UAAU,GAAG,MAAMN,eAAe,CAACI,IAAD,CAAxC;AAEAE,MAAAA,UAAU,CAACC,UAAX,CAAuBC,QAAD,IAAc;AAClCN,QAAAA,mBAAmB,CAAC;AAClBO,UAAAA,EAAE,EAAED,QAAQ,CAACC,EADK;AAElB,aAAGD,QAAQ,CAACE,IAAT;AAFe,SAAD,CAAnB;AAID,OALD;AAMD;AACF,GAdD,CAcE,OAAOC,KAAP,EAAc;AACdjB,IAAAA,GAAG,CAACO,mBAAmB,CAACU,KAAD,CAApB,CAAH;AACD;AACF;AAED,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMnB,UAAU,CAACI,SAAS,CAACgB,oBAAX,EAAiCV,iBAAjC,CAAhB;AACD;AAED,OAAO,UAAUW,SAAV,GAAsB;AAC3B,QAAMlB,GAAG,CAAC,CAACD,IAAI,CAACiB,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, call, all } from \"redux-saga/effects\";\r\nimport userTypes from \"./user.types\";\r\n\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserDocDB,\r\n} from \"../../utils/firebase/firebase.utils\";\r\nimport { googleSignInFailure, googleSignInSuccess } from \"./users.actions\";\r\n\r\nexport function* googleSignInStart() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n\r\n    if (user) {\r\n      // create new user\r\n      const userDocRef = yield createUserDocDB(user);\r\n\r\n      userDocRef.onSnapshot((snapShot) => {\r\n        googleSignInSuccess({\r\n          id: snapShot.id,\r\n          ...snapShot.data(),\r\n        });\r\n      });\r\n    }\r\n  } catch (error) {\r\n    put(googleSignInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isGoogleSignIn() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(isGoogleSignIn)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}