{"ast":null,"code":"import { takeLatest, put, call, all, takeEvery } from \"redux-saga/effects\";\nimport userTypes from \"./user.types\";\nimport { auth, googleProvider, createUserDocDB } from \"../../utils/firebase/firebase.utils\";\nimport { userLogoutSuccess, userLogoutFailure, signInFailure, signInSuccess } from \"./users.actions\";\nexport function* getUserSnapShot(userAuth) {\n  const userDocRef = yield call(createUserDocDB, userAuth);\n  const userSnapShot = yield userDocRef.get();\n  yield put(signInSuccess(userSnapShot));\n}\n/* ----------------------------- google sign in ----------------------------- */\n\nexport function* googleSignInStart() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* isGoogleSignIn() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\n}\n/* --------------------------------- logout --------------------------------- */\n\nexport function* logout() {\n  try {\n    const userRef = yield auth.signOut();\n    console.log(userRef);\n    yield put(userLogoutSuccess());\n  } catch (error) {\n    yield put(userLogoutFailure(error));\n  }\n}\nexport function* userLogoutAsync() {\n  yield takeEvery(userTypes.USER_LOGOUT_START, logout);\n}\n/* ------------------------------ email sign in ----------------------------- */\n\nexport function* emailAndPassLogin({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userDocRef = yield call(createUserDocDB, user);\n    const userSnapShot = yield userDocRef.get(); // console.warn(userRef);\n\n    yield put(emailSignInSuccess(userSnapShot));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* emailAndPassLoginAsync() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailAndPassLogin);\n}\nexport function* userSagas() {\n  yield all([call(isGoogleSignIn), call(userLogoutAsync), call(emailAndPassLoginAsync)]);\n}","map":{"version":3,"sources":["C:/React/crwn-clothing/src/redux/users/user.sagas.js"],"names":["takeLatest","put","call","all","takeEvery","userTypes","auth","googleProvider","createUserDocDB","userLogoutSuccess","userLogoutFailure","signInFailure","signInSuccess","getUserSnapShot","userAuth","userDocRef","userSnapShot","get","googleSignInStart","user","signInWithPopup","error","googleSignInFailure","isGoogleSignIn","GOOGLE_SIGN_IN_START","logout","userRef","signOut","console","log","userLogoutAsync","USER_LOGOUT_START","emailAndPassLogin","payload","email","password","signInWithEmailAndPassword","emailSignInSuccess","emailSignInFailure","emailAndPassLoginAsync","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,SAArC,QAAsD,oBAAtD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,eAHF,QAIO,qCAJP;AAKA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,aAHF,EAIEC,aAJF,QAKO,iBALP;AAOA,OAAO,UAAUC,eAAV,CAA0BC,QAA1B,EAAoC;AACzC,QAAMC,UAAU,GAAG,MAAMb,IAAI,CAACM,eAAD,EAAkBM,QAAlB,CAA7B;AACA,QAAME,YAAY,GAAG,MAAMD,UAAU,CAACE,GAAX,EAA3B;AAEA,QAAMhB,GAAG,CAACW,aAAa,CAACI,YAAD,CAAd,CAAT;AACD;AAED;;AACA,OAAO,UAAUE,iBAAV,GAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACD,GAFD,CAEE,OAAOc,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACqB,mBAAmB,CAACD,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUE,cAAV,GAA2B;AAChC,QAAMvB,UAAU,CAACK,SAAS,CAACmB,oBAAX,EAAiCN,iBAAjC,CAAhB;AACD;AAED;;AACA,OAAO,UAAUO,MAAV,GAAmB;AACxB,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMpB,IAAI,CAACqB,OAAL,EAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEA,UAAMzB,GAAG,CAACQ,iBAAiB,EAAlB,CAAT;AACD,GAND,CAME,OAAOY,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACS,iBAAiB,CAACW,KAAD,CAAlB,CAAT;AACD;AACF;AAED,OAAO,UAAUS,eAAV,GAA4B;AACjC,QAAM1B,SAAS,CAACC,SAAS,CAAC0B,iBAAX,EAA8BN,MAA9B,CAAf;AACD;AAED;;AACA,OAAO,UAAUO,iBAAV,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAyC;AAC9C,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AAEA,UAAM;AAAEd,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAAC8B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMpB,UAAU,GAAG,MAAMb,IAAI,CAACM,eAAD,EAAkBW,IAAlB,CAA7B;AACA,UAAMH,YAAY,GAAG,MAAMD,UAAU,CAACE,GAAX,EAA3B,CALE,CAMF;;AACA,UAAMhB,GAAG,CAACoC,kBAAkB,CAACrB,YAAD,CAAnB,CAAT;AACD,GARD,CAQE,OAAOK,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACqC,kBAAkB,CAACjB,KAAD,CAAnB,CAAT;AACD;AACF;AAED,OAAO,UAAUkB,sBAAV,GAAmC;AACxC,QAAMvC,UAAU,CAACK,SAAS,CAACmC,mBAAX,EAAgCR,iBAAhC,CAAhB;AACD;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAMtC,GAAG,CAAC,CACRD,IAAI,CAACqB,cAAD,CADI,EAERrB,IAAI,CAAC4B,eAAD,CAFI,EAGR5B,IAAI,CAACqC,sBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, put, call, all, takeEvery } from \"redux-saga/effects\";\r\nimport userTypes from \"./user.types\";\r\n\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserDocDB,\r\n} from \"../../utils/firebase/firebase.utils\";\r\nimport {\r\n  userLogoutSuccess,\r\n  userLogoutFailure,\r\n  signInFailure,\r\n  signInSuccess,\r\n} from \"./users.actions\";\r\n\r\nexport function* getUserSnapShot(userAuth) {\r\n  const userDocRef = yield call(createUserDocDB, userAuth);\r\n  const userSnapShot = yield userDocRef.get();\r\n\r\n  yield put(signInSuccess(userSnapShot));\r\n}\r\n\r\n/* ----------------------------- google sign in ----------------------------- */\r\nexport function* googleSignInStart() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n  } catch (error) {\r\n    yield put(googleSignInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isGoogleSignIn() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignInStart);\r\n}\r\n\r\n/* --------------------------------- logout --------------------------------- */\r\nexport function* logout() {\r\n  try {\r\n    const userRef = yield auth.signOut();\r\n\r\n    console.log(userRef);\r\n\r\n    yield put(userLogoutSuccess());\r\n  } catch (error) {\r\n    yield put(userLogoutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* userLogoutAsync() {\r\n  yield takeEvery(userTypes.USER_LOGOUT_START, logout);\r\n}\r\n\r\n/* ------------------------------ email sign in ----------------------------- */\r\nexport function* emailAndPassLogin({ payload }) {\r\n  try {\r\n    const { email, password } = payload;\r\n\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    const userDocRef = yield call(createUserDocDB, user);\r\n    const userSnapShot = yield userDocRef.get();\r\n    // console.warn(userRef);\r\n    yield put(emailSignInSuccess(userSnapShot));\r\n  } catch (error) {\r\n    yield put(emailSignInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* emailAndPassLoginAsync() {\r\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailAndPassLogin);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(isGoogleSignIn),\r\n    call(userLogoutAsync),\r\n    call(emailAndPassLoginAsync),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}